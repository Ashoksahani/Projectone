const crypto = require("crypto");
const algorithm = 'aes-256-cbc';
// const key = crypto.randomBytes(32);
// const iv = crypto.randomBytes(16);

function setPassword(secret, password, keylen = 32) {
    let hash = crypto.pbkdf2Sync(password, secret, 1000, keylen, "sha512").toString("hex");
    return hash;
}

function signsession(secret, payload, algoritham = "sha256") {
    let hmac = crypto.createHmac("sha256", secret);
    let signature = (hmac.update(payload), hmac.digest('base64'));
    return signature
}

function encrypt(payload, key, iv) {
    let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
    let encrypted = cipher.update(payload);
    encrypted = Buffer.concat([encrypted, cipher.final()]);
    // return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };
    return encrypted.toString('hex');
}

module.exports = {
    setPassword,
    signsession,
    encrypt
}